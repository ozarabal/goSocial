name: API Test Automation

on:
  push:
    branches: [main, develop]
    paths:
      - 'cmd/**'
      - 'internal/**' 
      - 'tests/**'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/api-test.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'cmd/**'
      - 'internal/**'
      - 'tests/**'
      - 'go.mod'
      - 'go.sum'
  workflow_dispatch:

env:
  GO_VERSION: '1.23'
  TEST_ENV: ci
  
jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      api-changed: ${{ steps.changes.outputs.api }}
      tests-changed: ${{ steps.changes.outputs.tests }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            api:
              - 'cmd/**'
              - 'internal/**'
              - 'go.mod'
              - 'go.sum'
            tests:
              - 'tests/**'
              - '.github/workflows/api-test.yml'

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          go mod download
          go install github.com/stretchr/testify/assert@latest

      - name: Validate Go modules
        run: |
          go mod verify
          go mod tidy
          git diff --exit-code go.mod go.sum

  unit-tests:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.api-changed == 'true' || needs.setup.outputs.tests-changed == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run unit tests
        run: |
          go test -v -race -short ./cmd/api -coverprofile=coverage.out -covermode=atomic -timeout=5m
          echo "Unit tests completed successfully"

      - name: Upload unit test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: unit-tests

  api-integration-tests:
    runs-on: ubuntu-latest
    needs: [setup, unit-tests]
    if: always() && (needs.setup.outputs.api-changed == 'true' || needs.setup.outputs.tests-changed == 'true')
    
    services:
      postgres:
        image: postgres:16.3
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: adminpassword
          POSTGRES_DB: social_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:6.2-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies and tools
        run: |
          go mod download
          sudo apt-get update
          sudo apt-get install -y curl jq

      - name: Install migrate tool
        run: |
          curl -L https://github.com/golang-migrate/migrate/releases/download/v4.16.2/migrate.linux-amd64.tar.gz | tar xvz
          sudo mv migrate /usr/local/bin/migrate
          sudo chmod +x /usr/local/bin/migrate

      - name: Install Swag
        run: go install github.com/swaggo/swag/cmd/swag@latest

      - name: Generate API docs
        run: |
          echo "Generating API documentation..."
          swag init -g ./cmd/api/main.go -d cmd,internal || echo "Documentation generation failed, continuing..."
          swag fmt || echo "Documentation formatting failed, continuing..."
          echo "Documentation step completed!"

      - name: Wait for database to be ready
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U admin; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "PostgreSQL not ready, waiting... ($i/30)"
            sleep 2
          done

      - name: Run database migrations
        env:
          DB_ADDR: postgres://admin:adminpassword@localhost:5432/social_test?sslmode=disable
        run: |
          echo "Running database migrations..."
          migrate -path=./cmd/migrate/migrations -database="$DB_ADDR" up
          echo "Migrations completed!"

      - name: Build application
        run: |
          echo "Building application..."
          go build -o bin/main ./cmd/api
          echo "Application built successfully!"

      - name: Start API server
        env:
          ENV: test
          ADDR: :3000
          DB_ADDR: postgres://admin:adminpassword@localhost:5432/social_test?sslmode=disable
          REDIS_ADDR: localhost:6379
          REDIS_ENABLE: true
          AUTH_TOKEN_SECRET: test-secret-key-for-ci-testing-only
          AUTH_BASIC_USER: admin
          AUTH_BASIC_PASS: admin
          SENDGRID_API_KEY: test-key-disabled-for-ci
          FROM_EMAIL: test@gosocial.com
          FRONTEND_URL: http://localhost:3000
          EXTERNAL_URL: localhost:3000
          RATE_LIMITER_ENABLED: false
          RATELIMITER_REQUEST_COUNT: 1000
        run: |
          echo "Starting API server..."
          ./bin/main &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          echo "API server started with PID: $SERVER_PID"
          
          echo "Waiting for API server to be ready..."
          for i in {1..60}; do
            if curl -f http://localhost:3000/v1/health > /dev/null 2>&1; then
              echo "API server is ready and responding!"
              curl -s http://localhost:3000/v1/health | jq '.' || echo "Health response received"
              break
            fi
            echo "API server not ready, waiting... ($i/60)"
            sleep 3
          done
          
          if ! curl -f http://localhost:3000/v1/health > /dev/null 2>&1; then
            echo "API server failed to start properly"
            echo "Server logs:"
            ps aux | grep main || echo "No main process found"
            netstat -tulpn | grep :3000 || echo "Port 3000 not listening"
            exit 1
          fi

      - name: Run API health check
        run: |
          echo "Final health check..."
          response=$(curl -s http://localhost:3000/v1/health)
          echo "Health check response: $response"
          
          if echo "$response" | grep -q '"status":"ok"'; then
            echo "Health check passed!"
          else
            echo "Health check failed!"
            echo "Response was: $response"
            exit 1
          fi

      - name: Run authentication integration tests
        env:
          TEST_ENV: ci
          API_BASE_URL: http://localhost:3000/v1
          PARALLEL_ENABLED: false
          DB_CLEANUP_BETWEEN_TESTS: true
          TIMEOUT_API: 30s
        run: |
          echo "Running authentication integration tests..."
          curl -f http://localhost:3000/v1/health || (echo "Server died before tests"; exit 1)
          
          timeout 300s go test -v ./tests/api/auth/... -timeout=5m || {
            echo "Authentication tests failed or timed out"
            echo "Server status:"
            curl -s http://localhost:3000/v1/health || echo "Server not responding"
            exit 1
          }

      - name: Run users integration tests
        env:
          TEST_ENV: ci
          API_BASE_URL: http://localhost:3000/v1
          PARALLEL_ENABLED: false
          DB_CLEANUP_BETWEEN_TESTS: true
          TIMEOUT_API: 30s
        run: |
          echo "Running users integration tests..."
          curl -f http://localhost:3000/v1/health || (echo "Server died before tests"; exit 1)
          
          timeout 300s go test -v ./tests/api/users/... -timeout=5m || {
            echo "Users tests failed or timed out"
            echo "Server status:"
            curl -s http://localhost:3000/v1/health || echo "Server not responding"
            exit 1
          }

      - name: Run posts integration tests
        env:
          TEST_ENV: ci
          API_BASE_URL: http://localhost:3000/v1
          PARALLEL_ENABLED: false
          DB_CLEANUP_BETWEEN_TESTS: true
          TIMEOUT_API: 30s
        run: |
          echo "Running posts integration tests..."
          curl -f http://localhost:3000/v1/health || (echo "Server died before tests"; exit 1)
          
          timeout 300s go test -v ./tests/api/posts/... -timeout=5m || {
            echo "Posts tests failed or timed out"
            echo "Server status:"
            curl -s http://localhost:3000/v1/health || echo "Server not responding"
            exit 1
          }

      - name: Generate integration test report
        if: always()
        run: |
          echo "Generating test report..."
          echo "Integration tests completed at $(date)"
          echo "Server was running on PID: ${SERVER_PID:-unknown}"
          
          if [ ! -z "$SERVER_PID" ] && kill -0 $SERVER_PID 2>/dev/null; then
            echo "Server is still running"
          else
            echo "Server is no longer running"
          fi

      - name: Stop API server
        if: always()
        run: |
          echo "Stopping API server..."
          if [ ! -z "$SERVER_PID" ]; then
            kill $SERVER_PID || true
            sleep 2
            kill -9 $SERVER_PID 2>/dev/null || true
            echo "Server stopped"
          else
            echo "No server PID to stop"
          fi
          
          pkill -f "bin/main" || true
          fuser -k 3000/tcp 2>/dev/null || true

  smoke-tests:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run basic compilation test
        run: |
          echo "Testing compilation..."
          go build -o /tmp/test-build ./cmd/api
          echo "Compilation successful!"

      - name: Run static analysis
        run: |
          echo "Running static analysis..."
          go vet ./cmd/... ./internal/...
          echo "Static analysis passed!"

  test-report:
    runs-on: ubuntu-latest
    needs: [unit-tests, api-integration-tests, smoke-tests]
    if: always()

    steps:
      - name: Generate test summary
        run: |
          echo "# API Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Unit Tests**: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Integration Tests**: ${{ needs.api-integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Smoke Tests**: ${{ needs.smoke-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.unit-tests.result }}" == "success" && 
                "${{ needs.api-integration-tests.result }}" == "success" && 
                "${{ needs.smoke-tests.result }}" == "success" ]]; then
            echo "## Overall Status: PASSED" >> $GITHUB_STEP_SUMMARY
            echo "All tests completed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "## Overall Status: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "Some tests failed. Please check the details above." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const results = {
              unit: '${{ needs.unit-tests.result }}',
              integration: '${{ needs.api-integration-tests.result }}',
              smoke: '${{ needs.smoke-tests.result }}'
            };
            
            let comment = '## API Test Results\n\n';
            comment += `- **Unit Tests**: ${results.unit === 'success' ? 'PASS' : 'FAIL'} ${results.unit}\n`;
            comment += `- **Integration Tests**: ${results.integration === 'success' ? 'PASS' : 'FAIL'} ${results.integration}\n`;
            comment += `- **Smoke Tests**: ${results.smoke === 'success' ? 'PASS' : 'FAIL'} ${results.smoke}\n\n`;
            
            const allPassed = Object.values(results).every(r => r === 'success');
            
            if (allPassed) {
              comment += '**All tests passed!** Ready for merge.\n';
            } else {
              comment += '**Some tests failed.** Please check the workflow details.\n';
            }
            
            comment += '\n[View detailed results](' + 
                      context.payload.repository.html_url + '/actions/runs/' + context.runId + ')\n';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  notification:
    runs-on: ubuntu-latest
    needs: [unit-tests, api-integration-tests, smoke-tests]
    if: always() && github.event_name != 'pull_request'

    steps:
      - name: Determine overall status
        id: status
        run: |
          unit="${{ needs.unit-tests.result }}"
          integration="${{ needs.api-integration-tests.result }}"
          smoke="${{ needs.smoke-tests.result }}"
          
          if [[ "$unit" == "success" && "$integration" == "success" && "$smoke" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=All tests passed successfully!" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=Some tests failed. Unit: $unit, Integration: $integration, Smoke: $smoke" >> $GITHUB_OUTPUT
          fi

      - name: Report status
        run: |
          echo "Overall test status: ${{ steps.status.outputs.status }}"
          echo "Message: ${{ steps.status.outputs.message }}"
          
          if [[ "${{ steps.status.outputs.status }}" == "failure" ]]; then
            echo "Tests failed! Check the workflow for details."
            exit 1
          else
            echo "All tests passed successfully!"
          fi