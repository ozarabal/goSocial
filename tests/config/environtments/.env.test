# tests/config/environments/.env.test
# Test Environment Configuration
TEST_ENV=test
API_BASE_URL=http://localhost:3001/v1
API_VERSION=v1

# Database Configuration
DB_CLEANUP_BETWEEN_TESTS=true
DB_USE_TRANSACTIONS=true
DB_SEED_DATA=false

# Authentication
TEST_USERNAME=testuser@example.com
TEST_PASSWORD=password123
ADMIN_USERNAME=admin@example.com
ADMIN_PASSWORD=adminpass123
TOKEN_EXPIRY=24h

# Timeouts
TIMEOUT_API=30s
TIMEOUT_DB=10s
TIMEOUT_TEST=5m
TIMEOUT_SETUP=30s

# Parallel Testing
PARALLEL_ENABLED=false
MAX_CONCURRENCY=4

# Rate Limiting
RATE_LIMIT_RPS=20
RATE_LIMIT_BURST=5
TEST_RATE_LIMIT=true
RATE_LIMIT_DELAY=5s

# Reporting
REPORTS_DIR=tests/reports
REPORTS_FORMAT=json
REPORTS_INCLUDE_DETAILS=true
SAVE_REQUESTS=false
SAVE_RESPONSES=false

# Security Testing
SECURITY_TESTS_ENABLED=true
INJECTION_TESTS_ENABLED=true

---

# tests/config/environments/.env.ci
# CI Environment Configuration
TEST_ENV=ci
API_BASE_URL=http://localhost:3001/v1

# Optimized for CI
PARALLEL_ENABLED=true
MAX_CONCURRENCY=2
TIMEOUT_API=15s
TIMEOUT_TEST=3m

# Minimal logging for CI
REPORTS_INCLUDE_DETAILS=false
SAVE_REQUESTS=false
SAVE_RESPONSES=false

# CI-specific
DB_CLEANUP_BETWEEN_TESTS=true
TEST_RATE_LIMIT=false
SECURITY_TESTS_ENABLED=true

---

# tests/config/environments/.env.local
# Local Development Testing Configuration
TEST_ENV=local
API_BASE_URL=http://localhost:3001/v1

# Development settings
PARALLEL_ENABLED=false
TIMEOUT_API=60s
TIMEOUT_TEST=10m

# Detailed logging for debugging
REPORTS_INCLUDE_DETAILS=true
SAVE_REQUESTS=true
SAVE_RESPONSES=true

# Local database
DB_CLEANUP_BETWEEN_TESTS=false
DB_SEED_DATA=true
TEST_RATE_LIMIT=false

---

# tests/scripts/setup-test-env.sh
#!/bin/bash

# Setup Test Environment Script

set -e

echo "🚀 Setting up GoSocial API Test Environment..."

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check dependencies
echo "📋 Checking dependencies..."

if ! command_exists go; then
    echo "❌ Go is not installed. Please install Go 1.23 or later."
    exit 1
fi

if ! command_exists docker; then
    echo "❌ Docker is not installed. Please install Docker."
    exit 1
fi

if ! command_exists docker-compose; then
    echo "❌ Docker Compose is not installed. Please install Docker Compose."
    exit 1
fi

echo "✅ All dependencies are installed."

# Create necessary directories
echo "📁 Creating test directories..."
mkdir -p tests/{reports,data/fixtures,config}
mkdir -p tests/framework/{client,auth,assertions,utils}
mkdir -p tests/api/{auth,users,posts,comments,followers}

# Install Go test dependencies
echo "📦 Installing Go test dependencies..."
go mod tidy
go get github.com/stretchr/testify/suite
go get github.com/go-resty/resty/v2
go get github.com/brianvoe/gofakeit/v6

# Setup test database
echo "🗄️ Setting up test database..."
docker-compose -f docker-compose.test.yml up -d db-test redis-test

# Wait for database to be ready
echo "⏳ Waiting for database to be ready..."
sleep 10

# Run database migrations
echo "🔄 Running database migrations..."
export DB_ADDR="postgres://admin:adminpassword@localhost:5433/social_test?sslmode=disable"
make migrate-up

# Start the test application
echo "🏃 Starting test application..."
docker-compose -f docker-compose.test.yml up -d app-test

# Wait for application to be ready
echo "⏳ Waiting for application to be ready..."
sleep 15

# Health check
echo "🏥 Performing health check..."
if curl -f http://localhost:3001/v1/health > /dev/null 2>&1; then
    echo "✅ Test environment is ready!"
    echo ""
    echo "🎯 Test URLs:"
    echo "   API: http://localhost:3001/v1"
    echo "   Health: http://localhost:3001/v1/health"
    echo "   Swagger: http://localhost:3001/v1/swagger/"
    echo ""
    echo "🛠️ Available Commands:"
    echo "   make test-api          - Run all API tests"
    echo "   make test-smoke        - Run smoke tests"
    echo "   make test-api-coverage - Run tests with coverage"
    echo "   make test-help         - Show all test commands"
else
    echo "❌ Health check failed. Please check the logs:"
    echo "   docker-compose -f docker-compose.test.yml logs app-test"
    exit 1
fi

---

# tests/scripts/cleanup-test-env.sh
#!/bin/bash

# Cleanup Test Environment Script

echo "🧹 Cleaning up GoSocial API Test Environment..."

# Stop and remove containers
echo "🛑 Stopping test containers..."
docker-compose -f docker-compose.test.yml down

# Remove volumes (optional)
read -p "🗑️ Do you want to remove test data volumes? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "🗑️ Removing test volumes..."
    docker-compose -f docker-compose.test.yml down -v
    docker volume prune -f
fi

# Clean test reports
echo "📋 Cleaning test reports..."
rm -rf tests/reports/*

# Clean temporary files
echo "🧽 Cleaning temporary files..."
find tests/ -name "*.tmp" -delete
find tests/ -name "*.log" -delete

echo "✅ Test environment cleanup completed!"

---

# tests/scripts/run-test-suite.sh
#!/bin/bash

# Run Complete Test Suite Script

set -e

ENVIRONMENT=${1:-local}
SUITE=${2:-all}

echo "🧪 Running GoSocial API Test Suite..."
echo "📍 Environment: $ENVIRONMENT"
echo "📦 Suite: $SUITE"

# Load environment configuration
if [ -f "tests/config/environments/.env.$ENVIRONMENT" ]; then
    echo "📋 Loading environment configuration..."
    set -a
    source "tests/config/environments/.env.$ENVIRONMENT"
    set +a
else
    echo "⚠️ Environment configuration not found, using defaults..."
fi

# Function to run specific test suite
run_test_suite() {
    local suite_name=$1
    echo "🏃 Running $suite_name tests..."
    
    case $suite_name in
        "auth")
            make test-api-auth
            ;;
        "posts")
            make test-api-posts
            ;;
        "users")
            make test-api-users
            ;;
        "